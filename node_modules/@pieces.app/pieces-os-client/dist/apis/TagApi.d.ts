/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { SeededScoreIncrement, Tag } from '../models';
export interface TagAssociateAssetRequest {
    asset: string;
    tag: string;
}
export interface TagAssociatePersonRequest {
    tag: string;
    person: string;
}
export interface TagDisassociateAssetRequest {
    tag: string;
    asset: string;
}
export interface TagDisassociatePersonRequest {
    tag: string;
    person: string;
}
export interface TagScoresIncrementRequest {
    tag: string;
    seededScoreIncrement?: SeededScoreIncrement;
}
export interface TagUpdateRequest {
    transferables?: boolean;
    tag?: Tag;
}
export interface TagsSpecificTagSnapshotRequest {
    tag: string;
    transferables?: boolean;
}
/**
 *
 */
export declare class TagApi extends runtime.BaseAPI {
    /**
     * This will associate a tag with a asset.
     * /tag/{tag}/assets/associate/{asset} [POST]
     */
    tagAssociateAssetRaw(requestParameters: TagAssociateAssetRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will associate a tag with a asset.
     * /tag/{tag}/assets/associate/{asset} [POST]
     */
    tagAssociateAsset(requestParameters: TagAssociateAssetRequest): Promise<void>;
    /**
     * This will associate a tag with a person.
     * /tag/{tag}/persons/associate/{person} [POST]
     */
    tagAssociatePersonRaw(requestParameters: TagAssociatePersonRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will associate a tag with a person.
     * /tag/{tag}/persons/associate/{person} [POST]
     */
    tagAssociatePerson(requestParameters: TagAssociatePersonRequest): Promise<void>;
    /**
     * This will enable us to dissassociate a tag from a asset.
     * /tag/{tag}/assets/disassociate/{asset} [POST]
     */
    tagDisassociateAssetRaw(requestParameters: TagDisassociateAssetRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will enable us to dissassociate a tag from a asset.
     * /tag/{tag}/assets/disassociate/{asset} [POST]
     */
    tagDisassociateAsset(requestParameters: TagDisassociateAssetRequest): Promise<void>;
    /**
     * This will enable us to dissassociate a tag from a person.
     * /tag/{tag}/persons/disassociate/{person} [POST]
     */
    tagDisassociatePersonRaw(requestParameters: TagDisassociatePersonRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will enable us to dissassociate a tag from a person.
     * /tag/{tag}/persons/disassociate/{person} [POST]
     */
    tagDisassociatePerson(requestParameters: TagDisassociatePersonRequest): Promise<void>;
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/tag/{tag}/scores/increment\' [POST]
     */
    tagScoresIncrementRaw(requestParameters: TagScoresIncrementRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/tag/{tag}/scores/increment\' [POST]
     */
    tagScoresIncrement(requestParameters: TagScoresIncrementRequest): Promise<void>;
    /**
     * This will update a specific tag.
     * /tag/update [POST]
     */
    tagUpdateRaw(requestParameters: TagUpdateRequest): Promise<runtime.ApiResponse<Tag>>;
    /**
     * This will update a specific tag.
     * /tag/update [POST]
     */
    tagUpdate(requestParameters: TagUpdateRequest): Promise<Tag>;
    /**
     * This will get a specific tag.
     * /tag/{tag} [GET]
     */
    tagsSpecificTagSnapshotRaw(requestParameters: TagsSpecificTagSnapshotRequest): Promise<runtime.ApiResponse<Tag>>;
    /**
     * This will get a specific tag.
     * /tag/{tag} [GET]
     */
    tagsSpecificTagSnapshot(requestParameters: TagsSpecificTagSnapshotRequest): Promise<Tag>;
}
