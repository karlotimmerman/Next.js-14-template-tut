"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class UsersApi extends runtime.BaseAPI {
    /**
     * Creates a User From a oAuth Token
     * /users/authenticate/from_token [POST]
     */
    async authenticateFromOauthTokenRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/users/authenticate/from_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OAuthTokenToJSON)(requestParameters.oAuthToken),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * Creates a User From a oAuth Token
     * /users/authenticate/from_token [POST]
     */
    async authenticateFromOauthToken(requestParameters) {
        const response = await this.authenticateFromOauthTokenRaw(requestParameters);
        return await response.value();
    }
    /**
     * Locally Removing a user for the purpose of Signing Out
     * /users/{user}/disconnect [POST]
     */
    async usersDisconnectUserRaw(requestParameters) {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling usersDisconnectUser.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/users/{user}/disconnect`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UsersFromJSON)(jsonValue));
    }
    /**
     * Locally Removing a user for the purpose of Signing Out
     * /users/{user}/disconnect [POST]
     */
    async usersDisconnectUser(requestParameters) {
        const response = await this.usersDisconnectUserRaw(requestParameters);
        return await response.value();
    }
    /**
     * this will return a snapshot of all of the users that are in the users database. TODO might want to make this internal.
     * /users [GET]
     */
    async usersSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UsersFromJSON)(jsonValue));
    }
    /**
     * this will return a snapshot of all of the users that are in the users database. TODO might want to make this internal.
     * /users [GET]
     */
    async usersSnapshot() {
        const response = await this.usersSnapshotRaw();
        return await response.value();
    }
    /**
     * This enables the client to get the current user.  This endpoint will return a UserPRofile or will throw an error since you are sending user uid.
     * /users/{user} [GET] Scoped to Users
     */
    async usersSpecificUserSnapshotRaw(requestParameters) {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling usersSpecificUserSnapshot.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/users/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * This enables the client to get the current user.  This endpoint will return a UserPRofile or will throw an error since you are sending user uid.
     * /users/{user} [GET] Scoped to Users
     */
    async usersSpecificUserSnapshot(requestParameters) {
        const response = await this.usersSpecificUserSnapshotRaw(requestParameters);
        return await response.value();
    }
}
exports.UsersApi = UsersApi;
