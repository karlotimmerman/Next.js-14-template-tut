"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PKCEApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class PKCEApi extends runtime.BaseAPI {
    /**
     * This is a function to Clear a PKCE Authentication Flow
     * /pkce/clear [POST]
     */
    async clearPKCERaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/pkce/clear`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This is a function to Clear a PKCE Authentication Flow
     * /pkce/clear [POST]
     */
    async clearPKCE() {
        await this.clearPKCERaw();
    }
    /**
     * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
     * /pkce/code [POST]
     */
    async generateCodeRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/pkce/code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededPKCEToJSON)(requestParameters.seededPKCE),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
    }
    /**
     * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
     * /pkce/code [POST]
     */
    async generateCode(requestParameters) {
        const response = await this.generateCodeRaw(requestParameters);
        return await response.value();
    }
    /**
     * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
     * /pkce/token [POST]
     */
    async generateTokenRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/pkce/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TokenizedPKCEToJSON)(requestParameters.tokenizedPKCE),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
    }
    /**
     * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
     * /pkce/token [POST]
     */
    async generateToken(requestParameters) {
        const response = await this.generateTokenRaw(requestParameters);
        return await response.value();
    }
    /**
     * An endpoint that returns a PKCE Challenge
     * Your GET endpoint
     */
    async getChallengeRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/pkce/challenge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
    }
    /**
     * An endpoint that returns a PKCE Challenge
     * Your GET endpoint
     */
    async getChallenge() {
        const response = await this.getChallengeRaw();
        return await response.value();
    }
    /**
     * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
     * /pkce/response/code [POST]
     */
    async respondWithCodeRaw(requestParameters) {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code', 'Required parameter requestParameters.code was null or undefined when calling respondWithCode.');
        }
        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state', 'Required parameter requestParameters.state was null or undefined when calling respondWithCode.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.schema !== undefined) {
            formParams.append('schema', new Blob([JSON.stringify((0, models_1.EmbeddedModelSchemaToJSON)(requestParameters.schema))], { type: "application/json", }));
        }
        if (requestParameters.code !== undefined) {
            formParams.append('code', requestParameters.code);
        }
        if (requestParameters.state !== undefined) {
            formParams.append('state', requestParameters.state);
        }
        const response = await this.request({
            path: `/pkce/response/code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PKCEFromJSON)(jsonValue));
    }
    /**
     * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
     * /pkce/response/code [POST]
     */
    async respondWithCode(requestParameters) {
        const response = await this.respondWithCodeRaw(requestParameters);
        return await response.value();
    }
}
exports.PKCEApi = PKCEApi;
