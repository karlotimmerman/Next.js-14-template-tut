"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExchangeForAuth0TokenGrantTypeEnum = exports.AuthorizeAuth0ResponseModeEnum = exports.AuthorizeAuth0CodeChallengeMethodEnum = exports.AuthorizeAuth0ResponseTypeEnum = exports.AuthorizeAuth0ScopeEnum = exports.Auth0Api = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class Auth0Api extends runtime.BaseAPI {
    /**
     * https://auth0.com/docs/api/authentication#logout
     * https://auth.pieces.services/v2/logout [GET]
     */
    async auth0LogoutRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }
        if (requestParameters.returnTo !== undefined) {
            queryParameters['returnTo'] = requestParameters.returnTo;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * https://auth0.com/docs/api/authentication#logout
     * https://auth.pieces.services/v2/logout [GET]
     */
    async auth0Logout(requestParameters) {
        const response = await this.auth0LogoutRaw(requestParameters);
        return await response.value();
    }
    /**
     * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
     * https://auth.pieces.services/authorize [GET]
     */
    async authorizeAuth0Raw(requestParameters) {
        if (requestParameters.audience === null || requestParameters.audience === undefined) {
            throw new runtime.RequiredError('audience', 'Required parameter requestParameters.audience was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope', 'Required parameter requestParameters.scope was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.responseType === null || requestParameters.responseType === undefined) {
            throw new runtime.RequiredError('responseType', 'Required parameter requestParameters.responseType was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId', 'Required parameter requestParameters.clientId was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.codeChallengeMethod === null || requestParameters.codeChallengeMethod === undefined) {
            throw new runtime.RequiredError('codeChallengeMethod', 'Required parameter requestParameters.codeChallengeMethod was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.codeChallenge === null || requestParameters.codeChallenge === undefined) {
            throw new runtime.RequiredError('codeChallenge', 'Required parameter requestParameters.codeChallenge was null or undefined when calling authorizeAuth0.');
        }
        if (requestParameters.responseMode === null || requestParameters.responseMode === undefined) {
            throw new runtime.RequiredError('responseMode', 'Required parameter requestParameters.responseMode was null or undefined when calling authorizeAuth0.');
        }
        const queryParameters = {};
        if (requestParameters.audience !== undefined) {
            queryParameters['audience'] = requestParameters.audience;
        }
        if (requestParameters.scope) {
            queryParameters['scope'] = requestParameters.scope.join(runtime.COLLECTION_FORMATS["ssv"]);
        }
        if (requestParameters.responseType !== undefined) {
            queryParameters['response_type'] = requestParameters.responseType;
        }
        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }
        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }
        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirect_uri'] = requestParameters.redirectUri;
        }
        if (requestParameters.codeChallengeMethod !== undefined) {
            queryParameters['code_challenge_method'] = requestParameters.codeChallengeMethod;
        }
        if (requestParameters.codeChallenge !== undefined) {
            queryParameters['code_challenge'] = requestParameters.codeChallenge;
        }
        if (requestParameters.connection !== undefined) {
            queryParameters['connection'] = requestParameters.connection;
        }
        if (requestParameters.prompt !== undefined) {
            queryParameters['prompt'] = requestParameters.prompt;
        }
        if (requestParameters.responseMode !== undefined) {
            queryParameters['response_mode'] = requestParameters.responseMode;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ResultedPKCEFromJSON)(jsonValue));
    }
    /**
     * An endpoint that is used locally authenticate via a PKCE Flow.  Example https://auth.pieces.services /authorize?audience=https%3A%2F%2Fpieces.us.auth0.com%2Fapi%2Fv2%2F&scope=email+profile+offline_access+openid&response_type=code&client_id=9sW4Pa1LEjX67l6VO14u0207NLYeXnu1&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fpkce%2Fresponse%2Fcode&code_challenge_method=S256&code_challenge=yxRssZxdfBpMigRmDxAety1QU72Bd5WnDUbtlsCZOnk&response_mode=form_post&state=4bd0b9a389b4b229602346c33913b4c3c199628a90011ab3a901302ab62b3832
     * https://auth.pieces.services/authorize [GET]
     */
    async authorizeAuth0(requestParameters) {
        const response = await this.authorizeAuth0Raw(requestParameters);
        return await response.value();
    }
    /**
     * An endpoint to generate a OAuth Token for an authentication flow.
     * https://auth.pieces.services/oauth/token [POST]
     */
    async exchangeForAuth0TokenRaw(requestParameters) {
        if (requestParameters.grantType === null || requestParameters.grantType === undefined) {
            throw new runtime.RequiredError('grantType', 'Required parameter requestParameters.grantType was null or undefined when calling exchangeForAuth0Token.');
        }
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId', 'Required parameter requestParameters.clientId was null or undefined when calling exchangeForAuth0Token.');
        }
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code', 'Required parameter requestParameters.code was null or undefined when calling exchangeForAuth0Token.');
        }
        if (requestParameters.redirectUri === null || requestParameters.redirectUri === undefined) {
            throw new runtime.RequiredError('redirectUri', 'Required parameter requestParameters.redirectUri was null or undefined when calling exchangeForAuth0Token.');
        }
        if (requestParameters.codeVerifier === null || requestParameters.codeVerifier === undefined) {
            throw new runtime.RequiredError('codeVerifier', 'Required parameter requestParameters.codeVerifier was null or undefined when calling exchangeForAuth0Token.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters.schema !== undefined) {
            formParams.append('schema', new Blob([JSON.stringify((0, models_1.EmbeddedModelSchemaToJSON)(requestParameters.schema))], { type: "application/json", }));
        }
        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType);
        }
        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId);
        }
        if (requestParameters.code !== undefined) {
            formParams.append('code', requestParameters.code);
        }
        if (requestParameters.redirectUri !== undefined) {
            formParams.append('redirect_uri', requestParameters.redirectUri);
        }
        if (requestParameters.codeVerifier !== undefined) {
            formParams.append('code_verifier', requestParameters.codeVerifier);
        }
        if (requestParameters.audience !== undefined) {
            formParams.append('audience', requestParameters.audience);
        }
        const response = await this.request({
            path: `/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OAuthTokenFromJSON)(jsonValue));
    }
    /**
     * An endpoint to generate a OAuth Token for an authentication flow.
     * https://auth.pieces.services/oauth/token [POST]
     */
    async exchangeForAuth0Token(requestParameters) {
        const response = await this.exchangeForAuth0TokenRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the users info from the Auth0 API
     * https://auth.pieces.services/userinfo [GET]
     */
    async getAuth0UserInfoRaw() {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.Auth0UserFromJSON)(jsonValue));
    }
    /**
     * Get the users info from the Auth0 API
     * https://auth.pieces.services/userinfo [GET]
     */
    async getAuth0UserInfo() {
        const response = await this.getAuth0UserInfoRaw();
        return await response.value();
    }
}
exports.Auth0Api = Auth0Api;
/**
    * @export
    * @enum {string}
    */
var AuthorizeAuth0ScopeEnum;
(function (AuthorizeAuth0ScopeEnum) {
    AuthorizeAuth0ScopeEnum["Openid"] = "openid";
    AuthorizeAuth0ScopeEnum["Email"] = "email";
    AuthorizeAuth0ScopeEnum["Profile"] = "profile";
    AuthorizeAuth0ScopeEnum["OfflineAccess"] = "offline_access";
})(AuthorizeAuth0ScopeEnum || (exports.AuthorizeAuth0ScopeEnum = AuthorizeAuth0ScopeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorizeAuth0ResponseTypeEnum;
(function (AuthorizeAuth0ResponseTypeEnum) {
    AuthorizeAuth0ResponseTypeEnum["Code"] = "code";
})(AuthorizeAuth0ResponseTypeEnum || (exports.AuthorizeAuth0ResponseTypeEnum = AuthorizeAuth0ResponseTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorizeAuth0CodeChallengeMethodEnum;
(function (AuthorizeAuth0CodeChallengeMethodEnum) {
    AuthorizeAuth0CodeChallengeMethodEnum["S256"] = "S256";
})(AuthorizeAuth0CodeChallengeMethodEnum || (exports.AuthorizeAuth0CodeChallengeMethodEnum = AuthorizeAuth0CodeChallengeMethodEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthorizeAuth0ResponseModeEnum;
(function (AuthorizeAuth0ResponseModeEnum) {
    AuthorizeAuth0ResponseModeEnum["FormPost"] = "form_post";
    AuthorizeAuth0ResponseModeEnum["Fragment"] = "fragment";
    AuthorizeAuth0ResponseModeEnum["Query"] = "query";
    AuthorizeAuth0ResponseModeEnum["WebMessage"] = "web_message";
})(AuthorizeAuth0ResponseModeEnum || (exports.AuthorizeAuth0ResponseModeEnum = AuthorizeAuth0ResponseModeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ExchangeForAuth0TokenGrantTypeEnum;
(function (ExchangeForAuth0TokenGrantTypeEnum) {
    ExchangeForAuth0TokenGrantTypeEnum["RefreshToken"] = "refresh_token";
    ExchangeForAuth0TokenGrantTypeEnum["AuthorizationCode"] = "authorization_code";
})(ExchangeForAuth0TokenGrantTypeEnum || (exports.ExchangeForAuth0TokenGrantTypeEnum = ExchangeForAuth0TokenGrantTypeEnum = {}));
