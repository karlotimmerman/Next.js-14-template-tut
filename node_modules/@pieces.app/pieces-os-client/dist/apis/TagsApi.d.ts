/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ExistentMetadata, ExistingMetadata, SeededTag, Tag, Tags } from '../models';
export interface TagsCreateNewTagRequest {
    transferables?: boolean;
    seededTag?: SeededTag;
}
export interface TagsDeleteSpecificTagRequest {
    tag: string;
}
export interface TagsExistsRequest {
    existentMetadata?: ExistentMetadata;
}
export interface TagsSnapshotRequest {
    transferables?: boolean;
}
/**
 *
 */
export declare class TagsApi extends runtime.BaseAPI {
    /**
     * This will create a new tag.
     * /tags/create [POST]
     */
    tagsCreateNewTagRaw(requestParameters: TagsCreateNewTagRequest): Promise<runtime.ApiResponse<Tag>>;
    /**
     * This will create a new tag.
     * /tags/create [POST]
     */
    tagsCreateNewTag(requestParameters: TagsCreateNewTagRequest): Promise<Tag>;
    /**
     * This will delete a specific tag.
     * /tags/{tag}/delete [POST]
     */
    tagsDeleteSpecificTagRaw(requestParameters: TagsDeleteSpecificTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will delete a specific tag.
     * /tags/{tag}/delete [POST]
     */
    tagsDeleteSpecificTag(requestParameters: TagsDeleteSpecificTagRequest): Promise<void>;
    /**
     * This will check all of the tags in our database to see if this specific provided tag actually exists, if not we will just return a null tag in the output.
     * /tags/exists [POST]
     */
    tagsExistsRaw(requestParameters: TagsExistsRequest): Promise<runtime.ApiResponse<ExistingMetadata>>;
    /**
     * This will check all of the tags in our database to see if this specific provided tag actually exists, if not we will just return a null tag in the output.
     * /tags/exists [POST]
     */
    tagsExists(requestParameters: TagsExistsRequest): Promise<ExistingMetadata>;
    /**
     * This will get a snapshot of all of your tags.
     * /tags [GET]
     */
    tagsSnapshotRaw(requestParameters: TagsSnapshotRequest): Promise<runtime.ApiResponse<Tags>>;
    /**
     * This will get a snapshot of all of your tags.
     * /tags [GET]
     */
    tagsSnapshot(requestParameters: TagsSnapshotRequest): Promise<Tags>;
}
