"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ConversationApi extends runtime.BaseAPI {
    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchorRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAnchor.');
        }
        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor', 'Required parameter requestParameters.anchor was null or undefined when calling conversationAssociateAnchor.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/anchors/associate/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will update both the anchor and the conversation.  and associate the 2 together
     * /conversation/{conversation}/anchors/associate/{anchor} [POST]
     */
    async conversationAssociateAnchor(requestParameters) {
        await this.conversationAssociateAnchorRaw(requestParameters);
    }
    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAssetRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateAsset.');
        }
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset', 'Required parameter requestParameters.asset was null or undefined when calling conversationAssociateAsset.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/assets/associate/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will update both the asset and the conversation.  and associate the 2 together
     * /conversation/{conversation}/assets/associate/{asset} [POST]
     */
    async conversationAssociateAsset(requestParameters) {
        await this.conversationAssociateAssetRaw(requestParameters);
    }
    /**
     * This will update both the website and the conversation.  and associate the 2 together
     * /conversation/{conversation}/websites/associate/{website} [POST]
     */
    async conversationAssociateWebsiteRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationAssociateWebsite.');
        }
        if (requestParameters.website === null || requestParameters.website === undefined) {
            throw new runtime.RequiredError('website', 'Required parameter requestParameters.website was null or undefined when calling conversationAssociateWebsite.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/websites/associate/{website}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will update both the website and the conversation.  and associate the 2 together
     * /conversation/{conversation}/websites/associate/{website} [POST]
     */
    async conversationAssociateWebsite(requestParameters) {
        await this.conversationAssociateWebsiteRaw(requestParameters);
    }
    /**
     * This will update both the anchor and the conversation.  and delete(disassociate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDisassociateAnchorRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateAnchor.');
        }
        if (requestParameters.anchor === null || requestParameters.anchor === undefined) {
            throw new runtime.RequiredError('anchor', 'Required parameter requestParameters.anchor was null or undefined when calling conversationDisassociateAnchor.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/anchors/delete/{anchor}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"anchor"}}`, encodeURIComponent(String(requestParameters.anchor))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will update both the anchor and the conversation.  and delete(disassociate) the 2 together
     * /conversation/{conversation}/anchors/delete/{anchor} [POST]
     */
    async conversationDisassociateAnchor(requestParameters) {
        await this.conversationDisassociateAnchorRaw(requestParameters);
    }
    /**
     * This will update both the asset and the conversation.  and delete(disassociate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDisassociateAssetRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateAsset.');
        }
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset', 'Required parameter requestParameters.asset was null or undefined when calling conversationDisassociateAsset.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/assets/delete/{asset}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will update both the asset and the conversation.  and delete(disassociate) the 2.
     * /conversation/{conversation}/assets/delete/{asset} [POST]
     */
    async conversationDisassociateAsset(requestParameters) {
        await this.conversationDisassociateAssetRaw(requestParameters);
    }
    /**
     * This will enable us to dissassociate a conversation from a website.
     * /website/{website}/websites/disassociate/{website} [POST]
     */
    async conversationDisassociateWebsiteRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationDisassociateWebsite.');
        }
        if (requestParameters.website === null || requestParameters.website === undefined) {
            throw new runtime.RequiredError('website', 'Required parameter requestParameters.website was null or undefined when calling conversationDisassociateWebsite.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/websites/disassociate/{website}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"website"}}`, encodeURIComponent(String(requestParameters.website))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will enable us to dissassociate a conversation from a website.
     * /website/{website}/websites/disassociate/{website} [POST]
     */
    async conversationDisassociateWebsite(requestParameters) {
        await this.conversationDisassociateWebsiteRaw(requestParameters);
    }
    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversationRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationGetSpecificConversation.');
        }
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
    }
    /**
     * This will get a specific conversation.
     * /conversation/{conversation} [GET]
     */
    async conversationGetSpecificConversation(requestParameters) {
        const response = await this.conversationGetSpecificConversationRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
     */
    async conversationGroundingMessagesAssociateMessageRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesAssociateMessage.');
        }
        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message', 'Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesAssociateMessage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/associate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will save the grounding context for a conversation. This will enable us to associate a message to the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/associate/{message} [POST]
     */
    async conversationGroundingMessagesAssociateMessage(requestParameters) {
        await this.conversationGroundingMessagesAssociateMessageRaw(requestParameters);
    }
    /**
     * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
     */
    async conversationGroundingMessagesDisassociateMessageRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationGroundingMessagesDisassociateMessage.');
        }
        if (requestParameters.message === null || requestParameters.message === undefined) {
            throw new runtime.RequiredError('message', 'Required parameter requestParameters.message was null or undefined when calling conversationGroundingMessagesDisassociateMessage.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/grounding/messages/disassociate/{message}`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))).replace(`{${"message"}}`, encodeURIComponent(String(requestParameters.message))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will remove specific grounding context for a conversation. This will enable us to dissassociate a message from the conversation.grounding object.
     * /conversation/{conversation}/grounding/messages/disassociate/{message} [POST]
     */
    async conversationGroundingMessagesDisassociateMessage(requestParameters) {
        await this.conversationGroundingMessagesDisassociateMessageRaw(requestParameters);
    }
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/conversation/{conversation}/scores/increment\' [POST]
     */
    async conversationScoresIncrementRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationScoresIncrement.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/conversation/{conversation}/scores/increment`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededScoreIncrementToJSON)(requestParameters.seededScoreIncrement),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/conversation/{conversation}/scores/increment\' [POST]
     */
    async conversationScoresIncrement(requestParameters) {
        await this.conversationScoresIncrementRaw(requestParameters);
    }
    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessagesRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationMessages.');
        }
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/messages`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationMessagesFromJSON)(jsonValue));
    }
    /**
     * This will get a specific conversations messages
     * /conversation/{conversation}/messages [GET]
     */
    async conversationSpecificConversationMessages(requestParameters) {
        const response = await this.conversationSpecificConversationMessagesRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will take a specific converssation and it will rename using ML.
     * /conversation/{conversation}/rename [POST]
     */
    async conversationSpecificConversationRenameRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationSpecificConversationRename.');
        }
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/conversation/{conversation}/rename`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
    }
    /**
     * This will take a specific converssation and it will rename using ML.
     * /conversation/{conversation}/rename [POST]
     */
    async conversationSpecificConversationRename(requestParameters) {
        const response = await this.conversationSpecificConversationRenameRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
     * /conversation/{conversation}/summarize [POST]
     */
    async conversationSummarizeRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationSummarize.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/conversation/{conversation}/summarize`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConversationSummarizeInputToJSON)(requestParameters.conversationSummarizeInput),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationSummarizeOutputFromJSON)(jsonValue));
    }
    /**
     * This will take a current conversation and create a summary of the conversation and save it as an annotation on the conversation.  will return the annotation reference used as the summary.
     * /conversation/{conversation}/summarize [POST]
     */
    async conversationSummarize(requestParameters) {
        const response = await this.conversationSummarizeRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdateRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/conversation/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ConversationToJSON)(requestParameters.conversation),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
    }
    /**
     * This will update a specific conversation.
     * /conversation/update [POST]
     */
    async conversationUpdate(requestParameters) {
        const response = await this.conversationUpdateRaw(requestParameters);
        return await response.value();
    }
}
exports.ConversationApi = ConversationApi;
