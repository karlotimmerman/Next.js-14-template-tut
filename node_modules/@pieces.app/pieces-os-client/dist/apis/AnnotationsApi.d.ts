/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Annotation, Annotations, SeededAnnotation } from '../models';
export interface AnnotationsCreateNewAnnotationRequest {
    seededAnnotation?: SeededAnnotation;
}
export interface AnnotationsDeleteSpecificAnnotationRequest {
    annotation: string;
}
export interface AnnotationsSnapshotRequest {
    annotationTypeFilter?: AnnotationsSnapshotAnnotationTypeFilterEnum;
}
/**
 *
 */
export declare class AnnotationsApi extends runtime.BaseAPI {
    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    annotationsCreateNewAnnotationRaw(requestParameters: AnnotationsCreateNewAnnotationRequest): Promise<runtime.ApiResponse<Annotation>>;
    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    annotationsCreateNewAnnotation(requestParameters: AnnotationsCreateNewAnnotationRequest): Promise<Annotation>;
    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    annotationsDeleteSpecificAnnotationRaw(requestParameters: AnnotationsDeleteSpecificAnnotationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    annotationsDeleteSpecificAnnotation(requestParameters: AnnotationsDeleteSpecificAnnotationRequest): Promise<void>;
    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    annotationsSnapshotRaw(requestParameters: AnnotationsSnapshotRequest): Promise<runtime.ApiResponse<Annotations>>;
    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    annotationsSnapshot(requestParameters: AnnotationsSnapshotRequest): Promise<Annotations>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum AnnotationsSnapshotAnnotationTypeFilterEnum {
    Description = "DESCRIPTION",
    Comment = "COMMENT",
    Commentation = "COMMENTATION",
    Documentation = "DOCUMENTATION",
    Summarization = "SUMMARIZATION",
    Summary = "SUMMARY",
    Explanation = "EXPLANATION",
    GitCommit = "GIT_COMMIT"
}
