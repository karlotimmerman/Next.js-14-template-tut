/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ExistentMetadata, ExistingMetadata, SeededWebsite, Website, Websites } from '../models';
export interface WebsitesCreateNewWebsiteRequest {
    transferables?: boolean;
    seededWebsite?: SeededWebsite;
}
export interface WebsitesDeleteSpecificWebsiteRequest {
    website: string;
}
export interface WebsitesExistsRequest {
    existentMetadata?: ExistentMetadata;
}
export interface WebsitesSnapshotRequest {
    transferables?: boolean;
}
/**
 *
 */
export declare class WebsitesApi extends runtime.BaseAPI {
    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    websitesCreateNewWebsiteRaw(requestParameters: WebsitesCreateNewWebsiteRequest): Promise<runtime.ApiResponse<Website>>;
    /**
     * This will create a website and attach it to a specific asset.
     * /websites/create [POST]
     */
    websitesCreateNewWebsite(requestParameters: WebsitesCreateNewWebsiteRequest): Promise<Website>;
    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    websitesDeleteSpecificWebsiteRaw(requestParameters: WebsitesDeleteSpecificWebsiteRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will delete a specific website!
     * /websites/{website}/delete [POST]
     */
    websitesDeleteSpecificWebsite(requestParameters: WebsitesDeleteSpecificWebsiteRequest): Promise<void>;
    /**
     * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
     * /websites/exists [POST]
     */
    websitesExistsRaw(requestParameters: WebsitesExistsRequest): Promise<runtime.ApiResponse<ExistingMetadata>>;
    /**
     * This will check all of the websites in our database to see if this specific provided website actually exists, if not we will just return a null website in the output.
     * /websites/exists [POST]
     */
    websitesExists(requestParameters: WebsitesExistsRequest): Promise<ExistingMetadata>;
    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    websitesSnapshotRaw(requestParameters: WebsitesSnapshotRequest): Promise<runtime.ApiResponse<Websites>>;
    /**
     * This will get a snapshot of all your websites.
     * /websites [GET]
     */
    websitesSnapshot(requestParameters: WebsitesSnapshotRequest): Promise<Websites>;
}
