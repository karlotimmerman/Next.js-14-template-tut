"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharesApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class SharesApi extends runtime.BaseAPI {
    /**
     * This endpoint will accept an asset. Response here will be a Share that was created.
     * /shares/create [POST]
     */
    async sharesCreateNewShareRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/shares/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededShareToJSON)(requestParameters.seededShare),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
    }
    /**
     * This endpoint will accept an asset. Response here will be a Share that was created.
     * /shares/create [POST]
     */
    async sharesCreateNewShare(requestParameters) {
        const response = await this.sharesCreateNewShareRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
     * /shares/{share}/delete [POST]
     */
    async sharesDeleteShareRaw(requestParameters) {
        if (requestParameters.share === null || requestParameters.share === undefined) {
            throw new runtime.RequiredError('share', 'Required parameter requestParameters.share was null or undefined when calling sharesDeleteShare.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/shares/{share}/delete`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.TextApiResponse(response);
    }
    /**
     * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
     * /shares/{share}/delete [POST]
     */
    async sharesDeleteShare(requestParameters) {
        const response = await this.sharesDeleteShareRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
     * /shares [GET]
     */
    async sharesSnapshotRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/shares`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SharesFromJSON)(jsonValue));
    }
    /**
     * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
     * /shares [GET]
     */
    async sharesSnapshot(requestParameters) {
        const response = await this.sharesSnapshotRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is an endpoint to enable a client to access a specific share through a provided share id.
     * /shares/{share} [GET]
     */
    async sharesSpecificShareSnapshotRaw(requestParameters) {
        if (requestParameters.share === null || requestParameters.share === undefined) {
            throw new runtime.RequiredError('share', 'Required parameter requestParameters.share was null or undefined when calling sharesSpecificShareSnapshot.');
        }
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/shares/{share}`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters.share))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ShareFromJSON)(jsonValue));
    }
    /**
     * This is an endpoint to enable a client to access a specific share through a provided share id.
     * /shares/{share} [GET]
     */
    async sharesSpecificShareSnapshot(requestParameters) {
        const response = await this.sharesSpecificShareSnapshotRaw(requestParameters);
        return await response.value();
    }
}
exports.SharesApi = SharesApi;
