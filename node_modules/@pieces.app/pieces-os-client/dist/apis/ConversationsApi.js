"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ConversationsApi extends runtime.BaseAPI {
    /**
     * This will create a conversation from an asset, This will create a conversation and an initial message for the conversation(w/ a summary of the asset that is being used as grounding context).
     * /conversations/create/from_asset/{asset} [POST]
     */
    async conversationsCreateFromAssetRaw(requestParameters) {
        if (requestParameters.asset === null || requestParameters.asset === undefined) {
            throw new runtime.RequiredError('asset', 'Required parameter requestParameters.asset was null or undefined when calling conversationsCreateFromAsset.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversations/create/from_asset/{asset}`.replace(`{${"asset"}}`, encodeURIComponent(String(requestParameters.asset))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationsCreateFromAssetOutputFromJSON)(jsonValue));
    }
    /**
     * This will create a conversation from an asset, This will create a conversation and an initial message for the conversation(w/ a summary of the asset that is being used as grounding context).
     * /conversations/create/from_asset/{asset} [POST]
     */
    async conversationsCreateFromAsset(requestParameters) {
        const response = await this.conversationsCreateFromAssetRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will create a specific conversation.
     * /conversations/create [POST]
     */
    async conversationsCreateSpecificConversationRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/conversations/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededConversationToJSON)(requestParameters.seededConversation),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationFromJSON)(jsonValue));
    }
    /**
     * This will create a specific conversation.
     * /conversations/create [POST]
     */
    async conversationsCreateSpecificConversation(requestParameters) {
        const response = await this.conversationsCreateSpecificConversationRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will delete a specific Conversation.
     * /conversations/{conversation}/delete [POST]
     */
    async conversationsDeleteSpecificConversationRaw(requestParameters) {
        if (requestParameters.conversation === null || requestParameters.conversation === undefined) {
            throw new runtime.RequiredError('conversation', 'Required parameter requestParameters.conversation was null or undefined when calling conversationsDeleteSpecificConversation.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversations/{conversation}/delete`.replace(`{${"conversation"}}`, encodeURIComponent(String(requestParameters.conversation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will delete a specific Conversation.
     * /conversations/{conversation}/delete [POST]
     */
    async conversationsDeleteSpecificConversation(requestParameters) {
        await this.conversationsDeleteSpecificConversationRaw(requestParameters);
    }
    /**
     * This will get all the uuids of a Conversation.
     * /conversations/identifiers [GET]
     */
    async conversationsIdentifiersSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversations/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FlattenedConversationsFromJSON)(jsonValue));
    }
    /**
     * This will get all the uuids of a Conversation.
     * /conversations/identifiers [GET]
     */
    async conversationsIdentifiersSnapshot() {
        const response = await this.conversationsIdentifiersSnapshotRaw();
        return await response.value();
    }
    /**
     * This will return a snapshot of a specific conversation
     * /conversations [GET]
     */
    async conversationsSnapshotRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.transferables !== undefined) {
            queryParameters['transferables'] = requestParameters.transferables;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ConversationsFromJSON)(jsonValue));
    }
    /**
     * This will return a snapshot of a specific conversation
     * /conversations [GET]
     */
    async conversationsSnapshot(requestParameters) {
        const response = await this.conversationsSnapshotRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is a stream for the conversation identifiers. will return StreamedIdentifiers.
     * /conversations/stream/identifiers [STREAMED]
     */
    async conversationsStreamIdentifiersRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/conversations/stream/identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This is a stream for the conversation identifiers. will return StreamedIdentifiers.
     * /conversations/stream/identifiers [STREAMED]
     */
    async conversationsStreamIdentifiers() {
        await this.conversationsStreamIdentifiersRaw();
    }
}
exports.ConversationsApi = ConversationsApi;
