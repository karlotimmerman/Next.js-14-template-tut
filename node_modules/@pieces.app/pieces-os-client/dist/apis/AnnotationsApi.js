"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationsSnapshotAnnotationTypeFilterEnum = exports.AnnotationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class AnnotationsApi extends runtime.BaseAPI {
    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    async annotationsCreateNewAnnotationRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/annotations/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededAnnotationToJSON)(requestParameters.seededAnnotation),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationFromJSON)(jsonValue));
    }
    /**
     * This will create an annotation.
     * /annotations/create [POST]
     */
    async annotationsCreateNewAnnotation(requestParameters) {
        const response = await this.annotationsCreateNewAnnotationRaw(requestParameters);
        return await response.value();
    }
    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    async annotationsDeleteSpecificAnnotationRaw(requestParameters) {
        if (requestParameters.annotation === null || requestParameters.annotation === undefined) {
            throw new runtime.RequiredError('annotation', 'Required parameter requestParameters.annotation was null or undefined when calling annotationsDeleteSpecificAnnotation.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/annotations/{annotation}/delete`.replace(`{${"annotation"}}`, encodeURIComponent(String(requestParameters.annotation))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * this will delete a specific annotation
     * /annotations/{annotation}/delete [POST]
     */
    async annotationsDeleteSpecificAnnotation(requestParameters) {
        await this.annotationsDeleteSpecificAnnotationRaw(requestParameters);
    }
    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    async annotationsSnapshotRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.annotationTypeFilter !== undefined) {
            queryParameters['annotation_type_filter'] = requestParameters.annotationTypeFilter;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/annotations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnnotationsFromJSON)(jsonValue));
    }
    /**
     * This will get a snapshot of all the annotations.  This will take an optional filter as a query param.
     * /annotations [GET]
     */
    async annotationsSnapshot(requestParameters) {
        const response = await this.annotationsSnapshotRaw(requestParameters);
        return await response.value();
    }
}
exports.AnnotationsApi = AnnotationsApi;
/**
    * @export
    * @enum {string}
    */
var AnnotationsSnapshotAnnotationTypeFilterEnum;
(function (AnnotationsSnapshotAnnotationTypeFilterEnum) {
    AnnotationsSnapshotAnnotationTypeFilterEnum["Description"] = "DESCRIPTION";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Comment"] = "COMMENT";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Commentation"] = "COMMENTATION";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Documentation"] = "DOCUMENTATION";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Summarization"] = "SUMMARIZATION";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Summary"] = "SUMMARY";
    AnnotationsSnapshotAnnotationTypeFilterEnum["Explanation"] = "EXPLANATION";
    AnnotationsSnapshotAnnotationTypeFilterEnum["GitCommit"] = "GIT_COMMIT";
})(AnnotationsSnapshotAnnotationTypeFilterEnum || (exports.AnnotationsSnapshotAnnotationTypeFilterEnum = AnnotationsSnapshotAnnotationTypeFilterEnum = {}));
