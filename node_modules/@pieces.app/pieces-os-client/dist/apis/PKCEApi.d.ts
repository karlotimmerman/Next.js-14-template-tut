/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { EmbeddedModelSchema, PKCE, SeededPKCE, TokenizedPKCE } from '../models';
export interface GenerateCodeRequest {
    seededPKCE?: SeededPKCE;
}
export interface GenerateTokenRequest {
    tokenizedPKCE?: TokenizedPKCE;
}
export interface RespondWithCodeRequest {
    code: string;
    state: string;
    schema?: EmbeddedModelSchema;
}
/**
 *
 */
export declare class PKCEApi extends runtime.BaseAPI {
    /**
     * This is a function to Clear a PKCE Authentication Flow
     * /pkce/clear [POST]
     */
    clearPKCERaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * This is a function to Clear a PKCE Authentication Flow
     * /pkce/clear [POST]
     */
    clearPKCE(): Promise<void>;
    /**
     * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
     * /pkce/code [POST]
     */
    generateCodeRaw(requestParameters: GenerateCodeRequest): Promise<runtime.ApiResponse<PKCE>>;
    /**
     * An endpoint to get the PKCE Code - this endpoint proxies the call out to Authorize within Auth0
     * /pkce/code [POST]
     */
    generateCode(requestParameters: GenerateCodeRequest): Promise<PKCE>;
    /**
     * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
     * /pkce/token [POST]
     */
    generateTokenRaw(requestParameters: GenerateTokenRequest): Promise<runtime.ApiResponse<PKCE>>;
    /**
     * A proxy endpoint for PKCE token generation, internally calls Auth0 /oauth/token
     * /pkce/token [POST]
     */
    generateToken(requestParameters: GenerateTokenRequest): Promise<PKCE>;
    /**
     * An endpoint that returns a PKCE Challenge
     * Your GET endpoint
     */
    getChallengeRaw(): Promise<runtime.ApiResponse<PKCE>>;
    /**
     * An endpoint that returns a PKCE Challenge
     * Your GET endpoint
     */
    getChallenge(): Promise<PKCE>;
    /**
     * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
     * /pkce/response/code [POST]
     */
    respondWithCodeRaw(requestParameters: RespondWithCodeRequest): Promise<runtime.ApiResponse<PKCE>>;
    /**
     * This is a callback function hosted to help pass along the ResultedPKCE code from authorize through to the callback.
     * /pkce/response/code [POST]
     */
    respondWithCode(requestParameters: RespondWithCodeRequest): Promise<PKCE>;
}
