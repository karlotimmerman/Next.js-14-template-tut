"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class UserApi extends runtime.BaseAPI {
    /**
     * An endpoint to clear the current user.
     * /user/clear
     */
    async clearUserRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/user/clear`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An endpoint to clear the current user.
     * /user/clear
     */
    async clearUser() {
        await this.clearUserRaw();
    }
    /**
     * This will select the current user.
     * /user/select [POST]
     */
    async selectUserRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("auth0", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/user/select`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.Auth0UserToJSON)(requestParameters.auth0User),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * This will select the current user.
     * /user/select [POST]
     */
    async selectUser(requestParameters) {
        const response = await this.selectUserRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will stream in the current user, not quiet sure yet how we want to do this.
     * /user/stream [GET]
     */
    async streamUserRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/user/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * This will stream in the current user, not quiet sure yet how we want to do this.
     * /user/stream [GET]
     */
    async streamUser() {
        const response = await this.streamUserRaw();
        return await response.value();
    }
    /**
     * This will update a specific user in the database.
     * /user/update [POST]
     */
    async updateUserRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/user/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * This will update a specific user in the database.
     * /user/update [POST]
     */
    async updateUser(requestParameters) {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
     * Your GET endpoint
     */
    async userProvidersRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/user/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReturnedUserProfileFromJSON)(jsonValue));
    }
    /**
     * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
     * Your GET endpoint
     */
    async userProviders() {
        const response = await this.userProvidersRaw();
        return await response.value();
    }
    /**
     * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
     * /user [GET]
     */
    async userSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReturnedUserProfileFromJSON)(jsonValue));
    }
    /**
     * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
     * /user [GET]
     */
    async userSnapshot() {
        const response = await this.userSnapshotRaw();
        return await response.value();
    }
    /**
     * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
     * /user/update/vanity [POST]
     */
    async userUpdateVanityRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/user/update/vanity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.UserProfileToJSON)(requestParameters.userProfile),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserProfileFromJSON)(jsonValue));
    }
    /**
     * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
     * /user/update/vanity [POST]
     */
    async userUpdateVanity(requestParameters) {
        const response = await this.userUpdateVanityRaw(requestParameters);
        return await response.value();
    }
}
exports.UserApi = UserApi;
