/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ConversationMessage, SeededScoreIncrement } from '../models';
export interface MessageAssociateAnnotationRequest {
    annotation: string;
    message: string;
}
export interface MessageDisassociateAnnotationRequest {
    annotation: string;
    message: string;
}
export interface MessageScoresIncrementRequest {
    message: string;
    seededScoreIncrement?: SeededScoreIncrement;
}
export interface MessageSpecificMessageSnapshotRequest {
    message: string;
    transferables?: boolean;
}
export interface MessageSpecificMessageUpdateRequest {
    transferables?: boolean;
    conversationMessage?: ConversationMessage;
}
/**
 *
 */
export declare class ConversationMessageApi extends runtime.BaseAPI {
    /**
     * This will associate a message with an annotation.
     * /message/{message}/annotations/associate/{annotation} [POST]
     */
    messageAssociateAnnotationRaw(requestParameters: MessageAssociateAnnotationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will associate a message with an annotation.
     * /message/{message}/annotations/associate/{annotation} [POST]
     */
    messageAssociateAnnotation(requestParameters: MessageAssociateAnnotationRequest): Promise<void>;
    /**
     * This will enable us to dissassociate a message from an annotation.
     * /message/{message}/annotations/disassociate/{annotation} [POST]
     */
    messageDisassociateAnnotationRaw(requestParameters: MessageDisassociateAnnotationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will enable us to dissassociate a message from an annotation.
     * /message/{message}/annotations/disassociate/{annotation} [POST]
     */
    messageDisassociateAnnotation(requestParameters: MessageDisassociateAnnotationRequest): Promise<void>;
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/message/{message}/scores/increment\' [POST]
     */
    messageScoresIncrementRaw(requestParameters: MessageScoresIncrementRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will take in a SeededScoreIncrement and will increment the material relative to the incoming body.
     * \'/message/{message}/scores/increment\' [POST]
     */
    messageScoresIncrement(requestParameters: MessageScoresIncrementRequest): Promise<void>;
    /**
     * This will get a specific snapshot of a message
     * /message/{message} [GET]
     */
    messageSpecificMessageSnapshotRaw(requestParameters: MessageSpecificMessageSnapshotRequest): Promise<runtime.ApiResponse<ConversationMessage>>;
    /**
     * This will get a specific snapshot of a message
     * /message/{message} [GET]
     */
    messageSpecificMessageSnapshot(requestParameters: MessageSpecificMessageSnapshotRequest): Promise<ConversationMessage>;
    /**
     * This will update a conversation message.
     * /message/update [GET]
     */
    messageSpecificMessageUpdateRaw(requestParameters: MessageSpecificMessageUpdateRequest): Promise<runtime.ApiResponse<ConversationMessage>>;
    /**
     * This will update a conversation message.
     * /message/update [GET]
     */
    messageSpecificMessageUpdate(requestParameters: MessageSpecificMessageUpdateRequest): Promise<ConversationMessage>;
}
