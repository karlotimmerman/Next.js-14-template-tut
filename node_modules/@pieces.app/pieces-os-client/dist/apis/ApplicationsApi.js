"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ApplicationsApi extends runtime.BaseAPI {
    /**
     * This will register a connected applicaiton.
     * /applications/register [POST]
     */
    async applicationsRegisterRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplicationToJSON)(requestParameters.application),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationFromJSON)(jsonValue));
    }
    /**
     * This will register a connected applicaiton.
     * /applications/register [POST]
     */
    async applicationsRegister(requestParameters) {
        const response = await this.applicationsRegisterRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will close your opened session! Going to want to accept a session uuid here.
     * /applications/session/close [POST]
     */
    async applicationsSessionCloseRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/session/close`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
    }
    /**
     * This will close your opened session! Going to want to accept a session uuid here.
     * /applications/session/close [POST]
     */
    async applicationsSessionClose(requestParameters) {
        const response = await this.applicationsSessionCloseRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will open a new session. A session is when someone is using the pieces application.
     * /applications/session/open [POST]
     */
    async applicationsSessionOpenRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/applications/session/open`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
    }
    /**
     * This will open a new session. A session is when someone is using the pieces application.
     * /applications/session/open [POST]
     */
    async applicationsSessionOpen() {
        const response = await this.applicationsSessionOpenRaw();
        return await response.value();
    }
    /**
     * This is an endpoint to get a snapshot of a specific session.
     * /applications/sessions/{session} [GET]
     */
    async applicationsSessionSnapshotRaw(requestParameters) {
        if (requestParameters.session === null || requestParameters.session === undefined) {
            throw new runtime.RequiredError('session', 'Required parameter requestParameters.session was null or undefined when calling applicationsSessionSnapshot.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/applications/sessions/{session}`.replace(`{${"session"}}`, encodeURIComponent(String(requestParameters.session))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SessionFromJSON)(jsonValue));
    }
    /**
     * This is an endpoint to get a snapshot of a specific session.
     * /applications/sessions/{session} [GET]
     */
    async applicationsSessionSnapshot(requestParameters) {
        const response = await this.applicationsSessionSnapshotRaw(requestParameters);
        return await response.value();
    }
    /**
     * /applications [GET]
     */
    async applicationsSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationsFromJSON)(jsonValue));
    }
    /**
     * /applications [GET]
     */
    async applicationsSnapshot() {
        const response = await this.applicationsSnapshotRaw();
        return await response.value();
    }
    /**
     * This will retrieve snapshot of a single application.
     * /applications/{application} [GET]
     */
    async applicationsSpecificApplicationSnapshotRaw(requestParameters) {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application', 'Required parameter requestParameters.application was null or undefined when calling applicationsSpecificApplicationSnapshot.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/applications/{application}`.replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApplicationFromJSON)(jsonValue));
    }
    /**
     * This will retrieve snapshot of a single application.
     * /applications/{application} [GET]
     */
    async applicationsSpecificApplicationSnapshot(requestParameters) {
        const response = await this.applicationsSpecificApplicationSnapshotRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
     * /applications/usage/engagement/interaction [POST] Scoped to Apps
     */
    async applicationsUsageEngagementInteractionRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/usage/engagement/interaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTrackedInteractionEventToJSON)(requestParameters.seededTrackedInteractionEvent),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackedInteractionEventFromJSON)(jsonValue));
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
     * /applications/usage/engagement/interaction [POST] Scoped to Apps
     */
    async applicationsUsageEngagementInteraction(requestParameters) {
        const response = await this.applicationsUsageEngagementInteractionRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
     * /applications/usage/engagement/keyboard [POST] Scoped to Apps
     */
    async applicationsUsageEngagementKeyboardRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/usage/engagement/keyboard`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededTrackedKeyboardEventToJSON)(requestParameters.seededTrackedKeyboardEvent),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TrackedKeyboardEventFromJSON)(jsonValue));
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
     * /applications/usage/engagement/keyboard [POST] Scoped to Apps
     */
    async applicationsUsageEngagementKeyboard(requestParameters) {
        const response = await this.applicationsUsageEngagementKeyboardRaw(requestParameters);
        return await response.value();
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
     * /applications/usage/installation [POST]
     */
    async applicationsUsageInstallationRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/usage/installation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TrackedApplicationInstallToJSON)(requestParameters.trackedApplicationInstall),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
     * /applications/usage/installation [POST]
     */
    async applicationsUsageInstallation(requestParameters) {
        await this.applicationsUsageInstallationRaw(requestParameters);
    }
    /**
     * This is an endpoint to determine when an application has been updated
     * /applications/usage/updated [POST]
     */
    async postApplicationsUsageUpdatedRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/applications/usage/updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TrackedApplicationUpdateToJSON)(requestParameters.trackedApplicationUpdate),
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This is an endpoint to determine when an application has been updated
     * /applications/usage/updated [POST]
     */
    async postApplicationsUsageUpdated(requestParameters) {
        await this.postApplicationsUsageUpdatedRaw(requestParameters);
    }
}
exports.ApplicationsApi = ApplicationsApi;
