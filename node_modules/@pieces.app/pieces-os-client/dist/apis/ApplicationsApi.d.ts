/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Application, Applications, SeededTrackedInteractionEvent, SeededTrackedKeyboardEvent, Session, TrackedApplicationInstall, TrackedApplicationUpdate, TrackedInteractionEvent, TrackedKeyboardEvent } from '../models';
export interface ApplicationsRegisterRequest {
    application?: Application;
}
export interface ApplicationsSessionCloseRequest {
    body?: string;
}
export interface ApplicationsSessionSnapshotRequest {
    session: string;
}
export interface ApplicationsSpecificApplicationSnapshotRequest {
    application: string;
}
export interface ApplicationsUsageEngagementInteractionRequest {
    seededTrackedInteractionEvent?: SeededTrackedInteractionEvent;
}
export interface ApplicationsUsageEngagementKeyboardRequest {
    seededTrackedKeyboardEvent?: SeededTrackedKeyboardEvent;
}
export interface ApplicationsUsageInstallationRequest {
    trackedApplicationInstall?: TrackedApplicationInstall;
}
export interface PostApplicationsUsageUpdatedRequest {
    trackedApplicationUpdate?: TrackedApplicationUpdate;
}
/**
 *
 */
export declare class ApplicationsApi extends runtime.BaseAPI {
    /**
     * This will register a connected applicaiton.
     * /applications/register [POST]
     */
    applicationsRegisterRaw(requestParameters: ApplicationsRegisterRequest): Promise<runtime.ApiResponse<Application>>;
    /**
     * This will register a connected applicaiton.
     * /applications/register [POST]
     */
    applicationsRegister(requestParameters: ApplicationsRegisterRequest): Promise<Application>;
    /**
     * This will close your opened session! Going to want to accept a session uuid here.
     * /applications/session/close [POST]
     */
    applicationsSessionCloseRaw(requestParameters: ApplicationsSessionCloseRequest): Promise<runtime.ApiResponse<Session>>;
    /**
     * This will close your opened session! Going to want to accept a session uuid here.
     * /applications/session/close [POST]
     */
    applicationsSessionClose(requestParameters: ApplicationsSessionCloseRequest): Promise<Session>;
    /**
     * This will open a new session. A session is when someone is using the pieces application.
     * /applications/session/open [POST]
     */
    applicationsSessionOpenRaw(): Promise<runtime.ApiResponse<Session>>;
    /**
     * This will open a new session. A session is when someone is using the pieces application.
     * /applications/session/open [POST]
     */
    applicationsSessionOpen(): Promise<Session>;
    /**
     * This is an endpoint to get a snapshot of a specific session.
     * /applications/sessions/{session} [GET]
     */
    applicationsSessionSnapshotRaw(requestParameters: ApplicationsSessionSnapshotRequest): Promise<runtime.ApiResponse<Session>>;
    /**
     * This is an endpoint to get a snapshot of a specific session.
     * /applications/sessions/{session} [GET]
     */
    applicationsSessionSnapshot(requestParameters: ApplicationsSessionSnapshotRequest): Promise<Session>;
    /**
     * /applications [GET]
     */
    applicationsSnapshotRaw(): Promise<runtime.ApiResponse<Applications>>;
    /**
     * /applications [GET]
     */
    applicationsSnapshot(): Promise<Applications>;
    /**
     * This will retrieve snapshot of a single application.
     * /applications/{application} [GET]
     */
    applicationsSpecificApplicationSnapshotRaw(requestParameters: ApplicationsSpecificApplicationSnapshotRequest): Promise<runtime.ApiResponse<Application>>;
    /**
     * This will retrieve snapshot of a single application.
     * /applications/{application} [GET]
     */
    applicationsSpecificApplicationSnapshot(requestParameters: ApplicationsSpecificApplicationSnapshotRequest): Promise<Application>;
    /**
     * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
     * /applications/usage/engagement/interaction [POST] Scoped to Apps
     */
    applicationsUsageEngagementInteractionRaw(requestParameters: ApplicationsUsageEngagementInteractionRequest): Promise<runtime.ApiResponse<TrackedInteractionEvent>>;
    /**
     * This is an analytics endpoint that will enable us to know when a user engages something via an interaction(ie click/tap).
     * /applications/usage/engagement/interaction [POST] Scoped to Apps
     */
    applicationsUsageEngagementInteraction(requestParameters: ApplicationsUsageEngagementInteractionRequest): Promise<TrackedInteractionEvent>;
    /**
     * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
     * /applications/usage/engagement/keyboard [POST] Scoped to Apps
     */
    applicationsUsageEngagementKeyboardRaw(requestParameters: ApplicationsUsageEngagementKeyboardRequest): Promise<runtime.ApiResponse<TrackedKeyboardEvent>>;
    /**
     * This is an analytics endpoint that will enable us to know when a user uses a keyboard short cut for any sort of engagement.
     * /applications/usage/engagement/keyboard [POST] Scoped to Apps
     */
    applicationsUsageEngagementKeyboard(requestParameters: ApplicationsUsageEngagementKeyboardRequest): Promise<TrackedKeyboardEvent>;
    /**
     * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
     * /applications/usage/installation [POST]
     */
    applicationsUsageInstallationRaw(requestParameters: ApplicationsUsageInstallationRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This is an analytics endpoint that will enable us to know when a user has installed a version of Pieces
     * /applications/usage/installation [POST]
     */
    applicationsUsageInstallation(requestParameters: ApplicationsUsageInstallationRequest): Promise<void>;
    /**
     * This is an endpoint to determine when an application has been updated
     * /applications/usage/updated [POST]
     */
    postApplicationsUsageUpdatedRaw(requestParameters: PostApplicationsUsageUpdatedRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This is an endpoint to determine when an application has been updated
     * /applications/usage/updated [POST]
     */
    postApplicationsUsageUpdated(requestParameters: PostApplicationsUsageUpdatedRequest): Promise<void>;
}
