/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { SeededShare, Share, Shares } from '../models';
export interface SharesCreateNewShareRequest {
    transferables?: boolean;
    seededShare?: SeededShare;
}
export interface SharesDeleteShareRequest {
    share: string;
}
export interface SharesSnapshotRequest {
    transferables?: boolean;
}
export interface SharesSpecificShareSnapshotRequest {
    share: string;
    transferables?: boolean;
}
/**
 *
 */
export declare class SharesApi extends runtime.BaseAPI {
    /**
     * This endpoint will accept an asset. Response here will be a Share that was created.
     * /shares/create [POST]
     */
    sharesCreateNewShareRaw(requestParameters: SharesCreateNewShareRequest): Promise<runtime.ApiResponse<Shares>>;
    /**
     * This endpoint will accept an asset. Response here will be a Share that was created.
     * /shares/create [POST]
     */
    sharesCreateNewShare(requestParameters: SharesCreateNewShareRequest): Promise<Shares>;
    /**
     * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
     * /shares/{share}/delete [POST]
     */
    sharesDeleteShareRaw(requestParameters: SharesDeleteShareRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * This endpoint will just take a share id(as a url param) to delete out of the shares table, will return the share id that was deleted.
     * /shares/{share}/delete [POST]
     */
    sharesDeleteShare(requestParameters: SharesDeleteShareRequest): Promise<string>;
    /**
     * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
     * /shares [GET]
     */
    sharesSnapshotRaw(requestParameters: SharesSnapshotRequest): Promise<runtime.ApiResponse<Shares>>;
    /**
     * This will return all of your shares. A Share is an asset that you as a user decided to share with another user via link.
     * /shares [GET]
     */
    sharesSnapshot(requestParameters: SharesSnapshotRequest): Promise<Shares>;
    /**
     * This is an endpoint to enable a client to access a specific share through a provided share id.
     * /shares/{share} [GET]
     */
    sharesSpecificShareSnapshotRaw(requestParameters: SharesSpecificShareSnapshotRequest): Promise<runtime.ApiResponse<Share>>;
    /**
     * This is an endpoint to enable a client to access a specific share through a provided share id.
     * /shares/{share} [GET]
     */
    sharesSpecificShareSnapshot(requestParameters: SharesSpecificShareSnapshotRequest): Promise<Share>;
}
