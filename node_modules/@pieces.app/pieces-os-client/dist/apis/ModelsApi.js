"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ModelsApi extends runtime.BaseAPI {
    /**
     * This will create a ml model, this is aloud however all models will be set to custom: true.  && we will verify we dont have a model that matches this model.
     * /models/create [POST]
     */
    async modelsCreateNewModelRaw(requestParameters) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/models/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SeededModelToJSON)(requestParameters.seededModel),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelFromJSON)(jsonValue));
    }
    /**
     * This will create a ml model, this is aloud however all models will be set to custom: true.  && we will verify we dont have a model that matches this model.
     * /models/create [POST]
     */
    async modelsCreateNewModel(requestParameters) {
        const response = await this.modelsCreateNewModelRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will delete a model, This is only available for custom: true models.
     * /models/{model}/delete [POST]
     */
    async modelsDeleteSpecificModelRaw(requestParameters) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling modelsDeleteSpecificModel.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/models/{model}/delete`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will delete a model, This is only available for custom: true models.
     * /models/{model}/delete [POST]
     */
    async modelsDeleteSpecificModel(requestParameters) {
        await this.modelsDeleteSpecificModelRaw(requestParameters);
    }
    /**
     * This is going to delete and sort of data that is associated with the Model itself IE the Assets/Libraries downloaded specifically for this model.  This is only available for the LLLM models for now.
     * /models/{model}/delete/cache [POST]
     */
    async modelsDeleteSpecificModelCacheRaw(requestParameters) {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling modelsDeleteSpecificModelCache.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/models/{model}/delete/cache`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ModelDeleteCacheInputToJSON)(requestParameters.modelDeleteCacheInput),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelDeleteCacheOutputFromJSON)(jsonValue));
    }
    /**
     * This is going to delete and sort of data that is associated with the Model itself IE the Assets/Libraries downloaded specifically for this model.  This is only available for the LLLM models for now.
     * /models/{model}/delete/cache [POST]
     */
    async modelsDeleteSpecificModelCache(requestParameters) {
        const response = await this.modelsDeleteSpecificModelCacheRaw(requestParameters);
        return await response.value();
    }
    /**
     * This will get a snapshot of all of your models.
     * /models [GET]
     */
    async modelsSnapshotRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ModelsFromJSON)(jsonValue));
    }
    /**
     * This will get a snapshot of all of your models.
     * /models [GET]
     */
    async modelsSnapshot() {
        const response = await this.modelsSnapshotRaw();
        return await response.value();
    }
    /**
     * This will unload all of the ml models.(that are unloadable)
     * /models/unload [POST]
     */
    async unloadModelsRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/models/unload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * This will unload all of the ml models.(that are unloadable)
     * /models/unload [POST]
     */
    async unloadModels() {
        await this.unloadModelsRaw();
    }
}
exports.ModelsApi = ModelsApi;
