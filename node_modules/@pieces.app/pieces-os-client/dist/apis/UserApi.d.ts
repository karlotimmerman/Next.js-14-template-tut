/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Auth0User, ReturnedUserProfile, UserProfile } from '../models';
export interface SelectUserRequest {
    auth0User?: Auth0User;
}
export interface UpdateUserRequest {
    userProfile?: UserProfile;
}
export interface UserUpdateVanityRequest {
    userProfile?: UserProfile;
}
/**
 *
 */
export declare class UserApi extends runtime.BaseAPI {
    /**
     * An endpoint to clear the current user.
     * /user/clear
     */
    clearUserRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * An endpoint to clear the current user.
     * /user/clear
     */
    clearUser(): Promise<void>;
    /**
     * This will select the current user.
     * /user/select [POST]
     */
    selectUserRaw(requestParameters: SelectUserRequest): Promise<runtime.ApiResponse<UserProfile>>;
    /**
     * This will select the current user.
     * /user/select [POST]
     */
    selectUser(requestParameters: SelectUserRequest): Promise<UserProfile>;
    /**
     * This will stream in the current user, not quiet sure yet how we want to do this.
     * /user/stream [GET]
     */
    streamUserRaw(): Promise<runtime.ApiResponse<UserProfile>>;
    /**
     * This will stream in the current user, not quiet sure yet how we want to do this.
     * /user/stream [GET]
     */
    streamUser(): Promise<UserProfile>;
    /**
     * This will update a specific user in the database.
     * /user/update [POST]
     */
    updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<UserProfile>>;
    /**
     * This will update a specific user in the database.
     * /user/update [POST]
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<UserProfile>;
    /**
     * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
     * Your GET endpoint
     */
    userProvidersRaw(): Promise<runtime.ApiResponse<ReturnedUserProfile>>;
    /**
     * This will retrieve all the users Providers that are connected to this account.  If called locally. we will 501 - because it is not implemented locally yet.  If called in the cloud, we will refresh && get your access tokens to access these providers.
     * Your GET endpoint
     */
    userProviders(): Promise<ReturnedUserProfile>;
    /**
     * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
     * /user [GET]
     */
    userSnapshotRaw(): Promise<runtime.ApiResponse<ReturnedUserProfile>>;
    /**
     * This will return a snapshot of the current user. This will return our ReturnUserProfile and the user on that object is just a UserProfile and can potentially be null.
     * /user [GET]
     */
    userSnapshot(): Promise<ReturnedUserProfile>;
    /**
     * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
     * /user/update/vanity [POST]
     */
    userUpdateVanityRaw(requestParameters: UserUpdateVanityRequest): Promise<runtime.ApiResponse<UserProfile>>;
    /**
     * This is a local route to update your vanityname. ie mark.pieces.cloud, where \"mark\" is the vanityname.
     * /user/update/vanity [POST]
     */
    userUpdateVanity(requestParameters: UserUpdateVanityRequest): Promise<UserProfile>;
}
