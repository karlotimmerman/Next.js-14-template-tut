/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Person, Persons, SeededPerson } from '../models';
export interface PersonDisassociateAssetRequest {
    person: string;
    asset: string;
}
export interface PersonsCreateNewPersonRequest {
    transferables?: boolean;
    seededPerson?: SeededPerson;
}
export interface PersonsDeletePersonRequest {
    person: string;
}
export interface PersonsSnapshotRequest {
    transferables?: boolean;
}
/**
 *
 */
export declare class PersonsApi extends runtime.BaseAPI {
    /**
     * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
     * /persons/{person}/assets/delete/{asset} [POST]
     */
    personDisassociateAssetRaw(requestParameters: PersonDisassociateAssetRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will update both the asset and the person reference, that will remove a person from an asset(only the references).  This will NOT remove the person. This will NOT remove the asset. This will only update the references so that they are disconnected from one another.
     * /persons/{person}/assets/delete/{asset} [POST]
     */
    personDisassociateAsset(requestParameters: PersonDisassociateAssetRequest): Promise<void>;
    /**
     * This will create a new person.
     * /persons/create [POST]
     */
    personsCreateNewPersonRaw(requestParameters: PersonsCreateNewPersonRequest): Promise<runtime.ApiResponse<Person>>;
    /**
     * This will create a new person.
     * /persons/create [POST]
     */
    personsCreateNewPerson(requestParameters: PersonsCreateNewPersonRequest): Promise<Person>;
    /**
     * This will delete a specific person.
     * /persons/{person}/delete [POST]
     */
    personsDeletePersonRaw(requestParameters: PersonsDeletePersonRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This will delete a specific person.
     * /persons/{person}/delete [POST]
     */
    personsDeletePerson(requestParameters: PersonsDeletePersonRequest): Promise<void>;
    /**
     * This will get a snapshot of all of your people
     * /persons [GET]
     */
    personsSnapshotRaw(requestParameters: PersonsSnapshotRequest): Promise<runtime.ApiResponse<Persons>>;
    /**
     * This will get a snapshot of all of your people
     * /persons [GET]
     */
    personsSnapshot(requestParameters: PersonsSnapshotRequest): Promise<Persons>;
}
